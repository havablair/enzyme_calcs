"0","# Function to get equation and R-sq for a model"
"0","lm_eqn <- function(m) {"
"0","  l <- list(intcpt = format(abs(coef(m)[1]), digits = 3, scientific=FALSE),"
"0","            slope = format(coef(m)[2], digits = 3, scientific=FALSE),"
"0","            rsq = format(summary(m)[""r.squared""], digits = 3));"
"0","  if (coef(m)[1] >= 0)  {"
"0","    eq <- paste(""y = "", l[""slope""], ""x + "", l[""intcpt""], "", R^2 = "", l[""rsq""], sep = """")"
"0","  } else {"
"0","    eq <- paste(""y = "", l[""slope""], ""x - "", l[""intcpt""], "", R^2 = "", l[""rsq""], sep = """")    "
"0","  }"
"0","}"
"0","# Function to plot a standard curve with equation and R-sq"
"0","plot.curve <- function(data, model) {"
"0","  plot(corr_std_mean ~ mub_conc_uM, data, main = unique(data$plate)) +"
"0","  abline(model) +"
"0","  mtext(lm_eqn(model), side = 3)"
"0","}"
"0","# Set up matrix to record coefficients and max conc for each plate's standard curve"
"0","coeff <- matrix(data = NA, ncol = 4, nrow = length(stds_list))"
"0","colnames(coeff)=c(""plate"", ""intcpt"", ""slope"", ""max.fluor"")"
"0","# Set up a matrix to record notes for each plate"
"0","curve.notes <- matrix(data = NA, ncol = 2, nrow = length(stds_list))"
"0","colnames(curve.notes)=c(""plate"", ""notes"")"
"0","# Set the minimum number of standards for a curve"
"0","# The absolute minimum to plot a straight line is 3"
"0","# We normally use 5-6 standards"
"0","min_stds <- 4"
